# This file contains the setting for the embedded Elastic Search server. This server will network
# with other ES instances embedded in other webapps. In this VM, this is the only ES instance which
# will store data. The other ES nodes will be clients who are connecting to the cluster in order to
# store or fetch data from this master node.


# For development work, the path property should be set to the target directory as this directory
# (and our previous index data) will be deleted with a 'clean' operation.
path.home = ${es.path.home}


# This is the name of the development cluster
cluster.name = ${es.cluster.name}


# These nodes do not expose an http connection point.
http.enabled = ${es.http.enabled}
http.port = 9311


# The server node will bind to an externally accessible IP address.
network.host = ${es.network.host}


# The ES server node will store index data.
node.data = true


# Set the default number of shards and replicas
index.number_of_shards = 5
index.number_of_replicas = 1


# Tell ES to index the _id property
index.mapping._id.indexed = true

# Where will the "temporary" index data be stored? If the memory store is used, we configure it to
# use memory directly; bypassing the Java Heap. Because of this, we do not need to set up our JVM's
# memory requirements to include ElasticSearch storage. 
index.store.type = ${es.index.store.type}
index.store.memory.direct = true
index.store.memory.warm_cache = true
index.store.fs.memory.direct = true


# The embedded Elastic Search server binds to port 9310.
transport.tcp.port = 9310

# Discovery type specified in Maven config.
discovery.type = ${es.discovery.type}
#discovery.zen.ping_timeout = 30s
discovery.ec2.ping_timeout = 10s
discovery.ec2.groups=zocia-sg


# Need to set up the credentials to use Amazon's S3 service for discovery and gateway.
cloud.aws.access_key = ${aws.access_key}
cloud.aws.secret_key = ${aws.secret_key}

# Gateway snapshots and indices using S3
gateway.type = ${es.gateway.type}
gateway.s3.bucket = ${environment}.${project.groupId}.${project.artifactId}.gateway


# Configuration of the various analyzers used by the mapping configuration files.

index.analysis.analyzer.lowercase_keyword.type=custom
index.analysis.analyzer.lowercase_keyword.tokenizer=keyword
index.analysis.analyzer.lowercase_keyword.filter.0=lowercase

index.analysis.analyzer.base_locale.tokenizer=base_locale
index.analysis.tokenizer.base_locale.type=pattern
index.analysis.tokenizer.base_locale.pattern=^(\\w\\w)
index.analysis.tokenizer.base_locale.group=0

index.analysis.analyzer.porter_standard.type=custom
index.analysis.analyzer.porter_standard.tokenizer=standard
index.analysis.analyzer.porter_standard.char_filter.0=html_strip
index.analysis.analyzer.porter_standard.filter.0=standard
index.analysis.analyzer.porter_standard.filter.1=lowercase
index.analysis.analyzer.porter_standard.filter.2=stop
index.analysis.analyzer.porter_standard.filter.3=porterStem

index.analysis.analyzer.email.type=custom
index.analysis.analyzer.email.tokenizer=uax_url_email
index.analysis.analyzer.email.filter.0=lowercase



index.analysis.analyzer.email_regex.type=pattern
index.analysis.analyzer.email_regex.lowercase=true
index.analysis.analyzer.email_regex.pattern=[@.]
index.analysis.analyzer.email_regex.stopwords=_none_

index.analysis.analyzer.email_split.type=custom
index.analysis.analyzer.email_split.tokenizer=letter
index.analysis.analyzer.email_split.filter.0=lowercase

